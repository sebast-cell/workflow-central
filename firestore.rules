rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an Admin.
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/employee/$(userId)) &&
             get(/databases/$(database)/documents/employee/$(userId)).data.role == 'Admin';
    }
    
    // Employee collection: Read for any authenticated user, write only for Admins.
    match /employee/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Absence Requests: Authenticated users can create their own requests.
    // Admins can read all and update/delete.
    match /absenceRequests/{requestId} {
      allow read, update, delete: if request.auth != null && isAdmin(request.auth.uid);
      allow create: if request.auth != null; // Further rules could check ownership (request.resource.data.employeeId == request.auth.uid)
    }

    // Attendance: Authenticated users can create their own logs.
    // Admins can read all.
    match /attendance/{logId} {
        allow read: if request.auth != null && isAdmin(request.auth.uid);
        allow create: if request.auth != null;
    }
    
    // Projects, Objectives, Tasks, Incentives: Read for authenticated users, write for Admins.
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /objectives/{objectiveId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /tasks/{taskId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /incentives/{incentiveId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Settings collections: Read for authenticated users, write for Admins.
    // This single rule covers all dynamic setting types.
    match /{settingCollection}/{settingId}
      where settingCollection in ['roles', 'centers', 'departments', 'breaks', 'clockInTypes', 'shifts', 'flexibleSchedules', 'fixedSchedules', 'absenceTypes', 'calendars', 'vacationPolicies'] {
        allow read: if request.auth != null;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // By default, no other collection is accessible.
    // This removes the overly permissive wildcard.
  }
}
