{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { jwtVerify } from 'jose';\n\nconst ADMIN_ROUTES = ['/dashboard', '/employees', '/reports', '/settings'];\nconst EMPLOYEE_ROUTES = ['/portal'];\nconst PUBLIC_ROUTES = ['/login'];\n\nconst JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || 'your-default-secret-key');\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  const sessionCookie = request.cookies.get('session')?.value;\n\n  let userPayload = null;\n  if (sessionCookie) {\n    try {\n      // Verifica el token de la cookie de sesión\n      const { payload } = await jwtVerify(sessionCookie, JWT_SECRET);\n      userPayload = payload;\n    } catch (error) {\n      // La cookie es inválida o ha expirado\n      console.error('Error al verificar la cookie de sesión:', error);\n      // Borra la cookie inválida y redirige al login\n      const response = NextResponse.redirect(new URL('/login', request.url));\n      response.cookies.delete('session');\n      return response;\n    }\n  }\n\n  // Si el usuario no está autenticado (no hay cookie/payload)\n  if (!userPayload) {\n    // Y está intentando acceder a una ruta que no es pública, redirigir a login\n    if (!PUBLIC_ROUTES.includes(pathname)) {\n      return NextResponse.redirect(new URL('/login', request.url));\n    }\n    return NextResponse.next();\n  }\n\n  // Si el usuario está autenticado\n  const userRole = (userPayload as any).role; // Obtiene el rol del payload del token\n\n  // Si el usuario está en la página de login, redirigir a su página principal\n  if (pathname === '/login') {\n    const url = userRole === 'Admin' || userRole === 'Owner' ? '/dashboard' : '/portal';\n    return NextResponse.redirect(new URL(url, request.url));\n  }\n\n  // Lógica de redirección basada en roles\n  const isAdmin = userRole === 'Admin' || userRole === 'Owner';\n  \n  // Si un empleado intenta acceder a una ruta de admin\n  if (!isAdmin && ADMIN_ROUTES.some(route => pathname.startsWith(route))) {\n    return NextResponse.redirect(new URL('/portal', request.url));\n  }\n  \n  // Si un admin intenta acceder a una ruta de empleado\n  if (isAdmin && EMPLOYEE_ROUTES.some(route => pathname.startsWith(route))) {\n    return NextResponse.redirect(new URL('/dashboard', request.url));\n  }\n\n  // Si no se cumple ninguna condición de redirección, permite el acceso\n  return NextResponse.next();\n}\n\n// Configuración para que el middleware se ejecute en todas las rutas excepto las estáticas\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEA,MAAM,eAAe;IAAC;IAAc;IAAc;IAAY;CAAY;AAC1E,MAAM,kBAAkB;IAAC;CAAU;AACnC,MAAM,gBAAgB;IAAC;CAAS;AAEhC,MAAM,aAAa,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU,IAAI;AAE/D,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IACpC,MAAM,gBAAgB,QAAQ,OAAO,CAAC,GAAG,CAAC,YAAY;IAEtD,IAAI,cAAc;IAClB,IAAI,eAAe;QACjB,IAAI;YACF,2CAA2C;YAC3C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAD,EAAE,eAAe;YACnD,cAAc;QAChB,EAAE,OAAO,OAAO;YACd,sCAAsC;YACtC,QAAQ,KAAK,CAAC,2CAA2C;YACzD,+CAA+C;YAC/C,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;YACpE,SAAS,OAAO,CAAC,MAAM,CAAC;YACxB,OAAO;QACT;IACF;IAEA,4DAA4D;IAC5D,IAAI,CAAC,aAAa;QAChB,4EAA4E;QAC5E,IAAI,CAAC,cAAc,QAAQ,CAAC,WAAW;YACrC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5D;QACA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,iCAAiC;IACjC,MAAM,WAAW,AAAC,YAAoB,IAAI,EAAE,uCAAuC;IAEnF,4EAA4E;IAC5E,IAAI,aAAa,UAAU;QACzB,MAAM,MAAM,aAAa,WAAW,aAAa,UAAU,eAAe;QAC1E,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,wCAAwC;IACxC,MAAM,UAAU,aAAa,WAAW,aAAa;IAErD,qDAAqD;IACrD,IAAI,CAAC,WAAW,aAAa,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QACtE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,WAAW,QAAQ,GAAG;IAC7D;IAEA,qDAAqD;IACrD,IAAI,WAAW,gBAAgB,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QACxE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,sEAAsE;IACtE,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}