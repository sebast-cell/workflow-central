{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { jwtVerify } from 'jose';\n\nconst ADMIN_ROUTES = ['/dashboard', '/employees', '/reports', '/settings'];\nconst EMPLOYEE_ROUTES = ['/portal'];\n// AÑADIMOS LA RUTA RAÍZ ('/') A LAS RUTAS PÚBLICAS\nconst PUBLIC_ROUTES = ['/', '/login', '/signup']; \n\n// Función para obtener la clave secreta de forma segura\nconst getJwtSecretKey = () => {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET no está definido en las variables de entorno.');\n  }\n  return new TextEncoder().encode(secret);\n};\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  const sessionCookie = request.cookies.get('session')?.value;\n\n  // --- LÓGICA MEJORADA ---\n  // 1. Si NO hay cookie...\n  if (!sessionCookie) {\n    // Si la ruta a la que intenta acceder no es pública, lo redirigimos a /login.\n    if (!PUBLIC_ROUTES.includes(pathname)) {\n      return NextResponse.redirect(new URL('/login', request.url));\n    }\n    // Si es una ruta pública, le dejamos pasar.\n    return NextResponse.next();\n  }\n\n  // 2. Si SÍ hay cookie, intentar verificarla\n  let userPayload = null;\n  try {\n    const { payload } = await jwtVerify(sessionCookie, getJwtSecretKey());\n    userPayload = payload;\n  } catch (error) {\n    // Si la verificación falla (token inválido, etc.), borramos la cookie mala y redirigimos a login\n    console.error('Fallo al verificar la cookie, borrándola:', error);\n    const response = NextResponse.redirect(new URL('/login', request.url));\n    response.cookies.delete('session');\n    return response;\n  }\n\n  // 3. Si la verificación es exitosa y tenemos los datos del usuario\n  const userRole = (userPayload as any).role;\n  const isAdmin = userRole === 'Admin' || userRole === 'Owner';\n  const homeUrl = isAdmin ? '/dashboard' : '/portal';\n\n  // Si un usuario autenticado intenta ir a una ruta pública, lo redirigimos a su panel\n  if (PUBLIC_ROUTES.includes(pathname)) {\n    return NextResponse.redirect(new URL(homeUrl, request.url));\n  }\n\n  // 4. Lógica de redirección por roles\n  if (!isAdmin && ADMIN_ROUTES.some(route => pathname.startsWith(route))) {\n    return NextResponse.redirect(new URL('/portal', request.url));\n  }\n  if (isAdmin && EMPLOYEE_ROUTES.some(route => pathname.startsWith(route))) {\n    return NextResponse.redirect(new URL('/dashboard', request.url));\n  }\n\n  // 5. Si todo está en orden, permitir el paso\n  return NextResponse.next();\n}\n\n// Configuración para que el middleware se ejecute en todas las rutas excepto las estáticas\nexport const config = {\n  matcher: [\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEA,MAAM,eAAe;IAAC;IAAc;IAAc;IAAY;CAAY;AAC1E,MAAM,kBAAkB;IAAC;CAAU;AACnC,mDAAmD;AACnD,MAAM,gBAAgB;IAAC;IAAK;IAAU;CAAU;AAEhD,wDAAwD;AACxD,MAAM,kBAAkB;IACtB,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU;IACrC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,IAAI,cAAc,MAAM,CAAC;AAClC;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IACpC,MAAM,gBAAgB,QAAQ,OAAO,CAAC,GAAG,CAAC,YAAY;IAEtD,0BAA0B;IAC1B,yBAAyB;IACzB,IAAI,CAAC,eAAe;QAClB,8EAA8E;QAC9E,IAAI,CAAC,cAAc,QAAQ,CAAC,WAAW;YACrC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5D;QACA,4CAA4C;QAC5C,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,4CAA4C;IAC5C,IAAI,cAAc;IAClB,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAD,EAAE,eAAe;QACnD,cAAc;IAChB,EAAE,OAAO,OAAO;QACd,iGAAiG;QACjG,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QACpE,SAAS,OAAO,CAAC,MAAM,CAAC;QACxB,OAAO;IACT;IAEA,mEAAmE;IACnE,MAAM,WAAW,AAAC,YAAoB,IAAI;IAC1C,MAAM,UAAU,aAAa,WAAW,aAAa;IACrD,MAAM,UAAU,UAAU,eAAe;IAEzC,qFAAqF;IACrF,IAAI,cAAc,QAAQ,CAAC,WAAW;QACpC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,SAAS,QAAQ,GAAG;IAC3D;IAEA,qCAAqC;IACrC,IAAI,CAAC,WAAW,aAAa,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QACtE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,WAAW,QAAQ,GAAG;IAC7D;IACA,IAAI,WAAW,gBAAgB,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QACxE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,6CAA6C;IAC7C,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}