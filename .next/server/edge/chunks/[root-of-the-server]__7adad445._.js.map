{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/session.ts"],"sourcesContent":["import 'server-only';\nimport { SignJWT, jwtVerify } from 'jose';\nimport { cookies } from 'next/headers';\nimport type { User } from './types';\n\nconst secretKey = process.env.SESSION_SECRET;\nconst encodedKey = new TextEncoder().encode(secretKey);\n\nexport async function encrypt(payload: any) {\n  return new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('7d')\n    .sign(encodedKey);\n}\n\nexport async function decrypt(session: string | undefined = '') {\n  try {\n    const { payload } = await jwtVerify(session, encodedKey, {\n      algorithms: ['HS256'],\n    });\n    return payload;\n  } catch (error) {\n    console.log('Failed to verify session');\n    return null;\n  }\n}\n\nexport async function createSession(user: User) {\n  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\n  const session = await encrypt({ user, expires });\n\n  cookies().set('session', session, {\n    expires,\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    path: '/',\n  });\n}\n\nexport async function getSession() {\n  const cookie = cookies().get('session')?.value;\n  const session = await decrypt(cookie);\n  return session ? (session.user as User) : null;\n}\n\nexport async function deleteSession() {\n  cookies().delete('session');\n}\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAAA;AACA;AAAA;;;;AAGA,MAAM,YAAY,QAAQ,GAAG,CAAC,cAAc;AAC5C,MAAM,aAAa,IAAI,cAAc,MAAM,CAAC;AAErC,eAAe,QAAQ,OAAY;IACxC,OAAO,IAAI,8JAAA,CAAA,UAAO,CAAC,SAChB,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,MAClB,IAAI,CAAC;AACV;AAEO,eAAe,QAAQ,UAA8B,EAAE;IAC5D,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAD,EAAE,SAAS,YAAY;YACvD,YAAY;gBAAC;aAAQ;QACvB;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT;AACF;AAEO,eAAe,cAAc,IAAU;IAC5C,MAAM,UAAU,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;IACzD,MAAM,UAAU,MAAM,QAAQ;QAAE;QAAM;IAAQ;IAE9C,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC,WAAW,SAAS;QAChC;QACA,UAAU;QACV,QAAQ,oDAAyB;QACjC,MAAM;IACR;AACF;AAEO,eAAe;IACpB,MAAM,SAAS,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC,YAAY;IACzC,MAAM,UAAU,MAAM,QAAQ;IAC9B,OAAO,UAAW,QAAQ,IAAI,GAAY;AAC5C;AAEO,eAAe;IACpB,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD,IAAI,MAAM,CAAC;AACnB"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { decrypt } from '@/lib/session';\n\nconst protectedAdminRoutes = ['/dashboard', '/employees', '/reports', '/settings'];\nconst protectedEmployeeRoutes = ['/portal', '/absences', '/tasks'];\nconst publicRoutes = ['/login'];\n\nexport async function middleware(request: NextRequest) {\n  const path = request.nextUrl.pathname;\n  const isProtectedRoute = protectedAdminRoutes.some(p => path.startsWith(p)) || protectedEmployeeRoutes.some(p => path.startsWith(p));\n  const isPublicRoute = publicRoutes.includes(path);\n\n  const cookie = request.cookies.get('session')?.value;\n  const session = await decrypt(cookie);\n  const user = session?.user as { role: string } | null;\n\n  if (isProtectedRoute && !user) {\n    return NextResponse.redirect(new URL('/login', request.nextUrl));\n  }\n\n  if (isPublicRoute && user) {\n    const redirectUrl = user.role === 'Admin' ? '/dashboard' : '/portal';\n    return NextResponse.redirect(new URL(redirectUrl, request.nextUrl));\n  }\n  \n  if (user) {\n    if (user.role === 'Admin' && protectedEmployeeRoutes.some(p => path.startsWith(p))) {\n      return NextResponse.redirect(new URL('/dashboard', request.nextUrl));\n    }\n    if (user.role === 'Employee' && protectedAdminRoutes.some(p => path.startsWith(p))) {\n      return NextResponse.redirect(new URL('/portal', request.nextUrl));\n    }\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEA,MAAM,uBAAuB;IAAC;IAAc;IAAc;IAAY;CAAY;AAClF,MAAM,0BAA0B;IAAC;IAAW;IAAa;CAAS;AAClE,MAAM,eAAe;IAAC;CAAS;AAExB,eAAe,WAAW,OAAoB;IACnD,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IACrC,MAAM,mBAAmB,qBAAqB,IAAI,CAAC,CAAA,IAAK,KAAK,UAAU,CAAC,OAAO,wBAAwB,IAAI,CAAC,CAAA,IAAK,KAAK,UAAU,CAAC;IACjI,MAAM,gBAAgB,aAAa,QAAQ,CAAC;IAE5C,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,YAAY;IAC/C,MAAM,UAAU,MAAM,CAAA,GAAA,6HAAA,CAAA,UAAO,AAAD,EAAE;IAC9B,MAAM,OAAO,SAAS;IAEtB,IAAI,oBAAoB,CAAC,MAAM;QAC7B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,OAAO;IAChE;IAEA,IAAI,iBAAiB,MAAM;QACzB,MAAM,cAAc,KAAK,IAAI,KAAK,UAAU,eAAe;QAC3D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,aAAa,QAAQ,OAAO;IACnE;IAEA,IAAI,MAAM;QACR,IAAI,KAAK,IAAI,KAAK,WAAW,wBAAwB,IAAI,CAAC,CAAA,IAAK,KAAK,UAAU,CAAC,KAAK;YAClF,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,OAAO;QACpE;QACA,IAAI,KAAK,IAAI,KAAK,cAAc,qBAAqB,IAAI,CAAC,CAAA,IAAK,KAAK,UAAU,CAAC,KAAK;YAClF,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,WAAW,QAAQ,OAAO;QACjE;IACF;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAkD;AAC9D"}}]
}